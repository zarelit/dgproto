#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble
% Gives us the "believe" symbol
\usepackage{turnstile}

% Simple predicates
\newcommand{\believes}{\sttstile{}{}}
\newcommand{\secret}[1]{\xrightleftharpoons{#1}}
\newcommand{\fresh}[1]{\#(#1)}
\newcommand{\encrypted}[2]{\lbrace #2 \rbrace_{#1}}
\newcommand{\encryptedfor}[2]{\lbrace #2 \rbrace_{e_#1}}
\newcommand{\signed}[2]{\lbrace #2 \rbrace_{e^{-1}_{#1}}}
\newcommand{\key}[1]{\xleftrightarrow{#1}}
\newcommand{\publickey}[1]{\xmapsto{e_{#1}} #1}
\newcommand{\sees}{\triangleleft}
\newcommand{\authority}{\Rightarrow}
\newcommand{\combined}[2]{\langle #1 \rangle _{#2}}

% Based on this question
% https://tex.stackexchange.com/questions/217755/how-do-i-write-logical-iff-symbol
\makeatletter
\newcommand{\said}{\mathrel{\mathpalette\@gdw@\relax}}
\newcommand{\@gdw@}[2]{\ooalign{$\m@th#1\mid$\cr$\m@th#1\:\sim$\cr}}
\makeatother

%% Postulates
% Message Meaning
\newcommand{\meaningI}[4]{\frac{#1\;\;\believes\;\; #2\key{#4}#1,\;\;\; #1\sees\encrypted{#4}{#3}}{#1\;\;\believes\;\; #2\said #3}}

\newcommand{\meaningII}[3]{\frac{#1\;\;\believes\;\; \publickey{#2},\;\;\; #1\sees\signed{#2}{#3}}{#1\;\;\believes\;\; #2\said #3}}

\newcommand{\meaningIII}[4]{\frac{#1\;\;\believes\;\; #2\secret{#4}#1,\;\;\; #1\sees\combined{#4}{#3}}{#1\;\;\believes\;\; #2\said #3}}

% Nonce verification rule
\newcommand{\nonce}[3]{\frac{#1\;\believes\;\fresh{#3},\; #1\;\believes\; #2 \said #3}{#1\;\believes\; #2\; \believes \; #3}}

% Jurisdiction rule
\newcommand{\jurisdiction}[3]{\frac{#1 \; \believes \; #2 \; \believes\; #3, \;\; #1 \; \believes \; #2 \authority{#3}}{#1 \; \believes \; #3}}

% Other postulates
\newcommand{\freshcouple}[3]{\frac{#1\;\believes\fresh{#2}}{#1\;\believes\fresh{#2,\, #3}}}

% Two secret parts of the key
\newcommand{\secretNa}{A\secret{N_{a}}B}
\newcommand{\secretNb}{A\secret{N_{b}}B}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 2
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Security In Networked Systems
\begin_inset Newline newline
\end_inset

Project's Report
\end_layout

\begin_layout Author
David Costa
\begin_inset Newline newline
\end_inset

Giuliano Peraz
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename secure com.svg
	width 80text%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part
Introduction
\end_layout

\begin_layout Section
Scenario (in Italian)
\begin_inset CommandInset label
LatexCommand label
name "sec:Scenario-(in-Italian)"

\end_inset


\end_layout

\begin_layout Standard
\noindent
Si consideri un’applicazione distribuita di tipo cliente-servitore in cui
 ciascun processo possiede una coppia di chiavi pubblica e privata.
\end_layout

\begin_layout Standard
\noindent
Si assuma che il servitore conosca la chiave pubblica di ogni suo cliente
 (i certificati non sono necessari).
\end_layout

\begin_layout Standard
\noindent
Si specifichi, si analizzi, si progetti ed, infine, si implementi un protocollo
 crittografico che soddisfa i seguenti requisiti:
\end_layout

\begin_layout Itemize
\noindent
al termine dell’esecuzione del protocollo, viene stabilita una chiave di
 sessione tra cliente e servitore;
\end_layout

\begin_layout Itemize
\noindent
al termine dell’esecuzione del protocollo, il cliente ritiene che il servitore
 dispone della chiave di sessione e viceversa;
\end_layout

\begin_layout Standard
\noindent
La specifica del protocollo deve mettere chiaramente in evidenza le ipotesi
 sotto le quali il protocollo funziona correttamente.
\end_layout

\begin_layout Standard
\noindent
L’implementazione deve comprende la realizzazione di un prototipo in cui
 il server ed il cliente si scambiano del materiale (testo o binario) cifrato
 con la chiave si sessione .
\end_layout

\begin_layout Standard
Le attività di specifica, analisi e progetto dovranno essere documentate
 da una concisa relazione scritta.
\end_layout

\begin_layout Standard
\noindent
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part
Protocol design & analysis
\end_layout

\begin_layout Section
Real protocol
\end_layout

\begin_layout Standard
In this section we explain the main idea, the main features and the objectives
 of the protocol, including an explanation for each message of the real
 protocol.
 
\end_layout

\begin_layout Subsection
Protocol Idea
\end_layout

\begin_layout Standard
We thought about a protocol that doesn't need to send the key over the unsecure
 channel.
 The idea is: the two main actors, the Client A and the Server B, have to
 create indipendentely the same session key which is the combination of
 two secret fresh random numbers (nonces 
\begin_inset Formula $N_{a}$
\end_inset

 and 
\begin_inset Formula $N_{b}$
\end_inset

) being generated by the actors of the protocol.
\end_layout

\begin_layout Standard
In order to avoid any possible information that makes the key easily to
 compute, the generation method is based on the hash of the two generated
 secret.
 A cryptographic hash function has the avalanche effect: if one or more
 bits of a message m are changed, then the output of 
\begin_inset Formula $hash(m)$
\end_inset

 will substantially change, i.e.
 SHA-1 changes the entire output also if only one bit of m has been changed.
\end_layout

\begin_layout Standard
This property of the hash function plays an important role in the protocol
 because it is sufficient to generate only one fresh nonce each session,
 instead of two, for creating a totally new fresh session key.
 What do we say with that? If either the client or the server implementation
 is wrong in the sense that a lazy programmer has implemented a nonce generation
 function which returns the same nonce each time, the key isn't compromised
 due to the fact that it depends on the other (hopefully) random nonce,
 too, so when the two nonces will be combined, the avalanche effect will
 create a key which will be unrelated to any other one and is still 
\begin_inset Quotes eld
\end_inset

difficult
\begin_inset Quotes erd
\end_inset

 to compute.
\end_layout

\begin_layout Standard
Clearly the specification of our protocol imposes the random generation
 of the two nonces, in order to increase the level of security of the applicatio
n, but our protocol is still secure also if someone makes a mistake in the
 implementation either the server or the client.
 Of course, if both implementations are wrong then someone doesn't actually
 use our protocol.
\end_layout

\begin_layout Standard
The on-the-fly generation of the key by each part of the protocol permits
 also to reach the key authentication objective after only 2 messages and
 key confirmation objective after 4.
\end_layout

\begin_layout Subsection
Protocol Objectives
\end_layout

\begin_layout Standard
By the specification of the project explained 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "sec:Scenario-(in-Italian)"

\end_inset

 we can extract these two objectives for our protocol:
\end_layout

\begin_layout Itemize
Key Authentication:
\begin_inset Newline newline
\end_inset


\begin_inset Formula $A\believes A\key{K}B$
\end_inset

,
\begin_inset Formula $\quad B\believes A\key{K}B$
\end_inset


\end_layout

\begin_layout Itemize
\noindent
Key Confirmation:
\begin_inset Newline newline
\end_inset


\begin_inset Formula $A\believes B\believes A\key{K}B$
\end_inset

,
\begin_inset Formula $\quad B\believes A\believes A\key{K}B$
\end_inset


\end_layout

\begin_layout Standard
Key Authentication says each part of the protocol must know the key K is
 the current session key, this objective is mandatory.
 Key confirmation says each part of the protocol knows the other part has
 the same session key for communicating.
\end_layout

\begin_layout Standard
The structure of our protocol reaches also another objective that isn't
 explain in the specification: Key Freshness.
 The way this object is met is to create the same fresh key for each part
 involved in the protocol.
\end_layout

\begin_layout Subsection
Real protocol messages
\end_layout

\begin_layout Standard
\begin_inset Formula $M1\quad A\to B:\quad A,\;\encryptedfor{B}{\signed{A}{N_{a}}}$
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Formula $M2\quad B\to A:\quad B,\;\encryptedfor{A}{N_{a},\;\signed{B}{N_{b}}}$
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\noindent
The key is a function of 
\begin_inset Formula $N_{a}$
\end_inset

 and 
\begin_inset Formula $N_{b}$
\end_inset

.
 In order to make it more readable we define 
\begin_inset Formula $\mbox{\mbox{\ensuremath{K=\combined{K_{AB}}{N_{a},N_{b}}}}}$
\end_inset


\begin_inset Newline newline
\end_inset

The way 
\begin_inset Formula $N_{a}$
\end_inset

 and 
\begin_inset Formula $N_{b}$
\end_inset

 are combined to create 
\begin_inset Formula $K$
\end_inset

 is explained 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "part:Protocol-implementation"

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Formula $M3\quad A\to B:\quad\encrypted{K}{\mathrm{H}(N_{b})}$
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Formula $M4\quad B\to A:\quad\encrypted{K}{\mathrm{H}(N_{a})}$
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\mathrm{H}$
\end_inset

 is an hash function whose output size is appropriate (see 
\begin_inset CommandInset ref
LatexCommand nameref
reference "part:Protocol-implementation"

\end_inset

).
 
\end_layout

\begin_layout Subsection
Protocol actions
\end_layout

\begin_layout Standard
A wants to communicate with B.
 In order to do this a session key must be estabilished by executing the
 following actions:
\end_layout

\begin_layout Enumerate
\begin_inset Formula $A$
\end_inset

 generates a random number 
\begin_inset Formula $N_{a}$
\end_inset

, signs it with its own key and encrypts it for 
\begin_inset Formula $B$
\end_inset

 using the public key 
\begin_inset Formula $e_{B}$
\end_inset

.
 This quantity is then sent to 
\begin_inset Formula $B$
\end_inset

 in a message together with the name of 
\begin_inset Formula $A$
\end_inset

 in plaintext.
 The presence of the name of 
\begin_inset Formula $A$
\end_inset

 unencrypted in the message allows a faster verification of the message
 for 
\begin_inset Formula $B$
\end_inset

 because it doesn't need to check against all the public keys it knows.
 Once received the message 
\begin_inset Formula $B$
\end_inset

 decrypts the message and verifies the signature.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $B$
\end_inset

 generates a random number 
\begin_inset Formula $N_{b}$
\end_inset

 and signs it with its own key.
 The signed 
\begin_inset Formula $N_{b}$
\end_inset

and plain 
\begin_inset Formula $N_{a}$
\end_inset

are then sent encrypted for 
\begin_inset Formula $A$
\end_inset

 using the public key 
\begin_inset Formula $e_{A}$
\end_inset

 together with the name of 
\begin_inset Formula $B$
\end_inset

 in plaintext for the same reason of the previous point.
 
\begin_inset Formula $A$
\end_inset

 decrypts the message and verifies the signature.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

 now calculate the session key by applying a function that ensures that
 all the bits of the key are dependent on each secret 
\begin_inset Formula $N_{a}$
\end_inset

 and 
\begin_inset Formula $N_{b}$
\end_inset

, i.e.
 an hash.
 The session key is generated and it never shows up as a piece of information
 in a protocol message so a verification is needed to check whether both
 partecipants has the same key; this is done by issuing two challenges.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $A$
\end_inset

 proves to 
\begin_inset Formula $B$
\end_inset

 that it knows the session key by hashing 
\begin_inset Formula $N_{b}$
\end_inset

 and sending it to 
\begin_inset Formula $B$
\end_inset

 encrypted with the session key 
\begin_inset Formula $K$
\end_inset

.
 
\begin_inset Formula $B$
\end_inset

 decrypts it and verifies the hash.
 
\end_layout

\begin_layout Enumerate
\begin_inset Formula $B$
\end_inset

 does the same, hashing 
\begin_inset Formula $N_{a}$
\end_inset

and sending it to 
\begin_inset Formula $A$
\end_inset

 encrypted with the session key 
\begin_inset Formula $K$
\end_inset

.
 
\begin_inset Formula $A$
\end_inset

 must then decrypt the message and verify the hash.
\end_layout

\begin_layout Standard
If any verification fails during the execution of the protocol, no further
 messages should be sent and the execution should be stopped (e.g.
 by closing the connection).
\end_layout

\begin_layout Section
Idealized Protocol
\end_layout

\begin_layout Standard
The idealized protocol is a translation of each crypted part of the real
 protocol messages in an appropriate form that explicits the meaning of
 each message rather than what the message transport through the network.
 In this section we will show which are the messages of the idealized protocol,
 including the implicit information and which is the meaning of each message.
\end_layout

\begin_layout Standard
If you are interested in the proof of the absence of problem into this protocol
 using BAN logic please go to section 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:Proof-by-BAN"

\end_inset


\end_layout

\begin_layout Subsection
Idealized Messages
\end_layout

\begin_layout Itemize
\begin_inset Formula $M1\quad A\to B:\quad\encryptedfor{B}{\signed{A}{N_{a},\;\secretNa}}$
\end_inset


\end_layout

\begin_layout Itemize
\noindent
\begin_inset Formula $M2\quad B\to A:\quad\encryptedfor{A}{N_{a},\;\signed{B}{N_{b},\;\secretNb}}$
\end_inset


\end_layout

\begin_layout Itemize
\noindent
\begin_inset Formula $M3\quad A\to B:\quad\encrypted{K=\combined{K_{AB}}{N_{a},N_{b}}}{\mathrm{H\mathit{(N_{b})},\; A\key{K}B}}$
\end_inset


\end_layout

\begin_layout Itemize
\noindent
\begin_inset Formula $M4\quad B\to A:\quad\encrypted{K}{\mathrm{H\mathit{(N_{a})},\; A\key{K}B}}$
\end_inset


\end_layout

\begin_layout Subsection
Idealized message meaning
\end_layout

\begin_layout Itemize

\series bold
M1
\series default
: A says to B that the nounce 
\begin_inset Formula $N_{a}$
\end_inset

 A has just generated is good for generating the key.
\end_layout

\begin_layout Itemize

\series bold
M2
\series default
: B says to A that the nounce 
\begin_inset Formula $N_{b}$
\end_inset

 B has just generated is good for generating the key.
\end_layout

\begin_layout Itemize

\series bold
M3
\series default
: A says to B that 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $K=\combined{K_{AB}}{N_{a},N_{b}}$
\end_inset

is the session key for this session.
\end_layout

\begin_layout Itemize

\series bold
M4
\series default
: B says to A that 
\begin_inset Formula $K$
\end_inset

 is the session key also for him.
\end_layout

\begin_layout Section
Proof by BAN logic
\begin_inset CommandInset label
LatexCommand label
name "sec:Proof-by-BAN"

\end_inset


\end_layout

\begin_layout Subsection*
Initial suppositions
\end_layout

\begin_layout Standard
According to the scenario: 
\begin_inset Formula $B\believes\publickey{A}$
\end_inset

.
\end_layout

\begin_layout Standard
Since there are no certificates involved, the only feasible ways for the
 client to authenticate the server is via a shared secret or by letting
 the client know the server's public key.
\end_layout

\begin_layout Standard
We chose for the latter thus 
\begin_inset Formula $A\believes\publickey{B}$
\end_inset

 must hold in order for the protocol to work correctly.
 Without this assumption our protocol (like other protocols) is subject
 to Man-In-The-Middle attack.
 
\end_layout

\begin_layout Standard
Also, since B is considered a server from the A's point of view, and since
 we use two shared secrets for building the session key, one from the client
 and one from the server, we may suppose that 
\begin_inset Formula $A\believes B\authority{(\secretNb)}$
\end_inset

, that is the client trusts the server in generating shared secret, but
 not viceversa.
\end_layout

\begin_layout Subsection*
\noindent
After message M1
\end_layout

\begin_layout Standard
A generated the secret 
\begin_inset Formula $N_{a}$
\end_inset

thus: 
\end_layout

\begin_layout Standard
\align center
\begin_inset Formula $A\believes\fresh{N_{a}}$
\end_inset

, 
\begin_inset Formula $A\believes\secretNa$
\end_inset

.
\end_layout

\begin_layout Standard
From B's point of view (applying the Message Meaning Rule):
\begin_inset Formula 
\[
\meaningII{B}{A}{\secretNa}
\]

\end_inset


\end_layout

\begin_layout Subsection*
\noindent
After message M2
\end_layout

\begin_layout Standard
B generated the secret 
\begin_inset Formula $N_{b}$
\end_inset

 thus:
\end_layout

\begin_layout Standard
\align center
\begin_inset Formula $B\believes\fresh{N_{b}}$
\end_inset

, 
\begin_inset Formula $B\believes\secretNb$
\end_inset


\end_layout

\begin_layout Standard
From A's point of view (applying the Message Meaning Rule):
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\meaningII{A}{B}{\secretNb}
\]

\end_inset


\end_layout

\begin_layout Standard
Since 
\begin_inset Formula 
\[
\frac{A\believes\fresh{N_{a}}}{A\believes\fresh{N_{a},N_{b},\secretNb}}
\]

\end_inset


\end_layout

\begin_layout Standard
then, for the Nonce Verification Rule:
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula 
\[
\frac{A\believes\fresh{N_{a},N_{b},\secretNb},\quad A\believes B\said(N_{a},N_{b},\secretNb)}{A\ \believes B\believes(N_{a},N_{b},\secretNb)}
\]

\end_inset


\end_layout

\begin_layout Standard
applying the postulates seen during the class we obtain:
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula 
\[
\frac{A\believes B\believes(N_{a},N_{b},\secretNb)}{A\believes B\believes\secretNb}
\]

\end_inset


\end_layout

\begin_layout Standard
and, for the Jurisdiction Rule:
\begin_inset Formula 
\[
\frac{A\believes B\believes\secretNb,\quad A\believes B\authority{(\secretNb)}}{A\believes\secretNb}
\]

\end_inset


\end_layout

\begin_layout Standard
B believes in the freshness of 
\begin_inset Formula $(N_{a},N_{b})$
\end_inset

 because 
\begin_inset Formula $\freshcouple{B}{N_{b}}{N_{a}}$
\end_inset

and so does A (already proved).
\end_layout

\begin_layout Standard
At this point, both the actors can use 
\begin_inset Formula $(N_{a},N_{b})$
\end_inset

 to generate the session key 
\begin_inset Formula $K=\combined{K_{AB}}{N_{a},N_{b}}$
\end_inset

 indipendently.
\end_layout

\begin_layout Standard
The fact that B generated the key leads to 
\begin_inset Formula $B\believes A\key{K}B$
\end_inset

.
 Same thing applies to A, but it has a stronger confidence in 
\begin_inset Formula $A\key{K}B$
\end_inset

 because of the jurisdiction rule applied before.
\end_layout

\begin_layout Standard
Considering that 
\begin_inset Formula $A\believes A\secret{K}B$
\end_inset

 and 
\begin_inset Formula $A\believes A\secret{K}B$
\end_inset

 the Key Authentication objective is reached.
\end_layout

\begin_layout Subsection*
\noindent
After message M3
\end_layout

\begin_layout Standard
By applying the Nonce Verification Rule:
\begin_inset Formula 
\[
\nonce{B}{A}{A\key{K}B}
\]

\end_inset


\end_layout

\begin_layout Subsection*
\noindent
After message M4
\end_layout

\begin_layout Standard
By applying the Nonce Verification Rule:
\begin_inset Formula 
\[
\nonce{A}{B}{A\key{K}B}
\]

\end_inset


\end_layout

\begin_layout Standard
After M3 and M4 we obtain the required key confirmation objective.
 As a side effect, key freshness is also obtained thanks to the fact each
 part has generated the session key in the current session of the protocol.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part
\noindent
Protocol implementation
\begin_inset CommandInset label
LatexCommand label
name "part:Protocol-implementation"

\end_inset


\end_layout

\begin_layout Standard
In this part we will explore the implementation details and the specifications
 of the project in order to implement correctly our protocol.
\end_layout

\begin_layout Section
Protocol Specification
\end_layout

\begin_layout Standard
The protocol will be based on the follwing specifications, some of them
 are mandatory by the professor, some others instead have been added by
 ourself.
\end_layout

\begin_layout Description
Public/private
\begin_inset space ~
\end_inset

keys: we recommend Elliptic Curve Cryptography, because it is faster and
 has smaller key than RSA but with the same level of confidentiality.
 However, due to some bugs in the OpenSSL library, in the implementation
 we was forced to use RSA criptographic and signing algorithms (see 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:OpenSSL-problems"

\end_inset

 for more details).
\end_layout

\begin_layout Description
Nounces: 
\begin_inset Formula $N_{a}$
\end_inset

 and 
\begin_inset Formula $N_{b}$
\end_inset

 must be 
\series bold
RANDOM
\series default
 128-bit numbers.
\end_layout

\begin_layout Description
Identifiers: the length of the identifiers are not fixed.
 We recommend to use as the small size as possible in order to use the ID
 as the hash of a table for retrieving the correct public key (server side).
\end_layout

\begin_layout Description
Hash
\begin_inset space ~
\end_inset

Functions: we recommend the last standard CRHF (Collision Resistant Hash
 Function).
 In particular we suggest 
\series bold
SHA-256
\series default
 or any equivalent hash function with a 256-bit output.
\end_layout

\begin_layout Description
Salt: the salt for the key generation must be 
\begin_inset Formula $S="FzHp3CbMao"$
\end_inset

.
\end_layout

\begin_layout Description
Key
\begin_inset space ~
\end_inset

Generation
\begin_inset space ~
\end_inset

Function: the key is generated by hashing the concatenation of the nonces
 and the salt:
\begin_inset Newline newline
\end_inset


\begin_inset Formula 
\[
K=H(N_{a}|N_{b}|"FzHp3CbMao")
\]

\end_inset

 where 
\begin_inset Formula $H(·)$
\end_inset

 is an hash function with output of 256-bit and so is the key.
\end_layout

\begin_layout Description
Initialization
\begin_inset space ~
\end_inset

Vectors: They must be random numbers.
\end_layout

\begin_layout Section
Implementation details
\begin_inset CommandInset label
LatexCommand label
name "sec:Implementation-details"

\end_inset


\end_layout

\begin_layout Standard
In this section we show the directory structure of the project, what the
 files contains and some considerations about the implementation of the
 project, that is which problems we encountered when developing the project
 itself and which solutions we adopted.
\end_layout

\begin_layout Subsection
Structure of the project
\end_layout

\begin_layout Standard
The project is composed by two little programs: the client and the server.
 In order to maintain an ordered structure we have created some directories
 which store files divided by extension: the header *.h files are all stored
 in ${PROJ_DIR}/include directory, source code *.c files are in the ${PROJ_DIR}/s
rc directory instead.
\end_layout

\begin_layout Standard
Since this is a demo project, that is we have to show our protocol works
 as expected, we saved the private and the public key, both client and server,
 into the ${PROJ_DIR}/key directory.
 We know that this is a security threat and a very big mistake, so we recommend
 putting correctly those files into a more secure structure such as a key
 database, i.e.
 GnuPG database, if someone would use our client and server source files
 for his future projects.
\end_layout

\begin_layout Standard
The project has been built using the cmake tool and the Gnu C Compiler,
 so there is a CMakeLists.txt file into ${PROJ_DIR} and the instructions
 for building the programs are in the README.txt file.
\end_layout

\begin_layout Subsubsection
Source code files
\end_layout

\begin_layout Standard
We decided to implement separately the client and the server parts, so one
 of us wrote the client and the other one the server.
 We wrote each part using the C programming language, as requested by the
 professor, and we used the OpenSSL library as said by the project specification
s.
\end_layout

\begin_layout Standard
The project code is divided into these parts:
\end_layout

\begin_layout Description
server.c It is the main file which contains the main() of the server, its
 internal data structures and the whole code the server has to run in order
 to work properly.
 Remember that a server can't brutally exit like a client program can do,
 that is the server must recognize all errors and must consequently act
 in order to close the communication if something goes wrong during the
 data exchange.
\end_layout

\begin_layout Description
client.c This file contain the main() function of the client.
 The code permits the client to communicate with the server starting with
 the D&G protocol, then the client will send a file and will wait the server
 response which will consist of another file, then the client will exit.
\end_layout

\begin_layout Description
protocol.c The code of the protocol is written here.
 The protocol doesn't only mean the creation of the messages client and
 server exchange, but also some functions being used for the message verifing
 step.
 If one single protocol message fails, then the protocol is aborted, so
 the client program will exit and the server will close that connection.
\end_layout

\begin_layout Description
utils.c This file contains all the utility functions both client and server
 share.
 Here there are encryption, decryption, signing and verifying by means of
 public key, decryption and encryption by means of symmetric key, digest
 creation using SHA256 algorithm and some other functions that permits to
 concatenate bit strings in one single buffer and viceversa.Please add the
 part of the concatenating messages, sending a buffer etc etc etc.
\end_layout

\begin_layout Standard
We designed this project in order to simplify reading, mantaining and to
 make easier extending features for whom will able to do that.
\end_layout

\begin_layout Standard
We have developed the code using as much standards as possible, an example
 of this is the using the std* libraries.
\end_layout

\begin_layout Subsubsection
Header files
\end_layout

\begin_layout Standard
Each header file, with the same name of the .c file, contains the definitions
 of the publicly available functions and also their documentation.
 We have documented the code following the doxygen documentation tool language,
 that is a javadoc-style markdown language, but in our opinion it is more
 flexible and powerful than the standard documentation tool of Java language.
\end_layout

\begin_layout Standard
There is also a header file called common.h which contains all the needed
 include directives and some useful macros which are used by both client
 and server.
\end_layout

\begin_layout Subsection
OpenSSL problems
\begin_inset CommandInset label
LatexCommand label
name "sub:OpenSSL-problems"

\end_inset


\end_layout

\begin_layout Standard
During the development of this project, we encountered some bugs and some
 limitations of the OpenSSL library.
 We want to develop a system which will use the Elliptic Curve Cryptography,
 but during the project development we noticed that some of the OpenSSL
 sign verification functionalities didn't work well because, when testing
 the program, the return value of the signature verification function wasn't
 what expected: sometimes the signature verification function failed, sometimes
 it succeded but always on the same test designed for passing the verification.
 That problem has been solved by changing the EC keys to RSA keys.
 Only this change have made the same test to pass every time as expected
 without source code changes.
\end_layout

\begin_layout Standard
We saw another 
\begin_inset Quotes eld
\end_inset

strange
\begin_inset Quotes erd
\end_inset

 behaviour of OpenSSL library functions: when using EVP_PKEY_Encrypt* we
 noticed that we couldn't encrypt more than public_key_size/8 - 11 bytes.
 After some time googling in the net, we learnt that this limit is by PKCS#1
 standard, so, in our case, we couldn't encrypt more than 501 bytes.
 We tried using a smaller nonce size, but the RSA signature occupies 512
 bytes, so we couldn't crypt anything without exceeding RSA limitations.
\end_layout

\begin_layout Standard
Since we didn't want to modify the protocol by moving the encrypted sign
 of the nonce outside the encrypted block, we moved to use the digital envelopes
 OpenSSL provides.
 This is useful for exchanging files or everything greater than 501 bytes
 with few changes to the code.
 Using digital envelopes 
\end_layout

\begin_layout Subsection
Using standards
\end_layout

\begin_layout Standard
We have developed the project thinking about portability, so we have included
 and used only standard libraries, i.
 e.
 stdint.h in order to make as easier as possible a port to another UNIX-like
 operating system, or Windows-like but with MinGW software compilation installed.
\end_layout

\begin_layout Subsection
Extract and concatenate messages
\end_layout

\begin_layout Standard
A problem we have encountered during the development was the recognizing
 of which bytes belong to one field of one message and which not so.
 We have solved this problem by means of extr_msgs() which uses a variable
 number of struct message_data (more details in the documentation of utils.h),
 in order to extract the field of a message, that is this function puts
 into those structs the information about a field by knowing the field's
 length.
\end_layout

\begin_layout Standard
Another similar problem was to create a single message, a.
 k.
 a.
 bitstream, from the separated field.
 This is the opposite problem wrt the above one.
 We have solved this by developing the conc_msgs() function which is the
 exact opposite of extr_msgs(), that is conc_msgs() accept a sorted variable
 list of message_data structs and puts them in a single bitstream.
 For example, since M1 is composed by 5 parts in the implementation of the
 protocol, when it received received M1, the server must extract each part
 from a single bit stream.
 The extraction has been made by the extr_msgs() function.
 But the server must also create M2 which is also composed by 5 parts.
 In order to create M2, the server creates each parts separately, then it
 uses conc_msgs() in order to produce a bit stream to be sent to the client.
 More details are in the documentation of the project.
\end_layout

\begin_layout Subsection
Sending Buffers
\end_layout

\begin_layout Standard
recv() and send() could not send all the bytes user wants them to send,
 so it can be needed to call those system calls more times for sending all
 the data the user wants to.
 In order to solve this problem we have implemented sendbuf() function that
 is in charge of continuously try to send the buffer passed by parameter
 until all bytes has been sent.
\end_layout

\begin_layout Subsection
Implemented protocol
\end_layout

\begin_layout Standard
After the development of this project, client and server will send these
 messages:
\begin_inset Newline newline
\end_inset


\begin_inset Formula $M1\quad A\to B:\quad A,\ IV_{env},\ E_{kenv},\ \encryptedfor{B}{\signed{A}{N_{a}}}$
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Formula $M2\quad B\to A:\quad B,\; IV,\ IV_{env},\ E_{kenv},\ \encryptedfor{A}{N_{a},\;\signed{B}{N_{b}}}$
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Formula $M3\quad A\to B:\quad\encrypted{K}{\mathrm{H}(N_{b})}$
\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Formula $M4\quad B\to A:\quad\encrypted{K}{\mathrm{H}(N_{a})}$
\end_inset


\end_layout

\begin_layout Standard
Where letters subscripted with env means that they are parameters of the
 OpenSSL's digital envelopes.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Reusable parts of the project
\end_layout

\begin_layout Standard
This project wasn't been thought to be extendend in future projects, since
 the client.c and server.c describes only an example of what a program must
 do for using our protocol correctly.
 In our opinion the reusable code is written inside protocol.c and utils.c.
 The first file has been thought for users which want our protocol to use,
 when the latter file is a collection of functions with the same purpouse
 of protocol.c, but they are more general, so we can use them, and anyone
 can do that, in any other project we will design and implement in the future.
 An example of this is conc_msgs() and extr_msgs() functions which will
 accept a struct message_data, explained in utils.h with the documentation,
 in order to make easier both the concatenation of single parts of a message
 in a single one and the extraction of the interesting parts from a single
 large message received by the client or the server.
 
\end_layout

\begin_layout Standard
We deploy our code under the GPL v3.0 Licence.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Part
BAN Logic in Latex
\end_layout

\begin_layout Standard
Simple predicates
\end_layout

\begin_layout Itemize
\begin_inset Formula $A\believes B$
\end_inset

, A 
\backslash
believes B
\end_layout

\begin_layout Itemize
\begin_inset Formula $A\said B$
\end_inset

, A 
\backslash
said B
\end_layout

\begin_layout Itemize
\begin_inset Formula $A\key{K}B$
\end_inset

, A 
\backslash
key{K} B
\end_layout

\begin_layout Itemize
\begin_inset Formula $A\secret{K}B$
\end_inset

, A 
\backslash
secret{K} B
\end_layout

\begin_layout Itemize
\begin_inset Formula $P\sees Q$
\end_inset

, P 
\backslash
sees Q
\end_layout

\begin_layout Itemize
\begin_inset Formula $\encrypted{K}{X}$
\end_inset

, 
\backslash
encrypted{K}{X}
\end_layout

\begin_layout Itemize
\begin_inset Formula $\encryptedfor{A}{X}$
\end_inset

, 
\backslash
encryptedfor {A}{X}
\end_layout

\begin_layout Itemize
\begin_inset Formula $\signed{A}{X}$
\end_inset

, 
\backslash
signed{A}{X}
\end_layout

\begin_layout Itemize
\begin_inset Formula $\fresh{N}$
\end_inset

, 
\backslash
fresh{N}
\end_layout

\begin_layout Itemize
\begin_inset Formula $\publickey{Q}$
\end_inset

, 
\backslash
publickey{Q}
\end_layout

\begin_layout Itemize
\begin_inset Formula $\authority{N_{a}}$
\end_inset

, 
\backslash
authority{N_a}
\end_layout

\begin_layout Itemize
\begin_inset Formula $\combined{X}{Y}$
\end_inset

, 
\backslash
combined{X}{Y}
\end_layout

\begin_layout Standard
Postulates
\end_layout

\begin_layout Enumerate
Message Meaning
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\meaningI{P}{Q}{X}{K}$
\end_inset

, 
\backslash
meaningI{P}{Q}{X}{K}
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\meaningII{P}{Q}{X}$
\end_inset

, 
\backslash
meaningII{P}{Q}{X}
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\meaningIII{P}{Q}{X}{Y}$
\end_inset

, 
\backslash
meaningIII{P}{Q}{X}{Y}
\end_layout

\end_deeper
\begin_layout Enumerate
Nonce Verification
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\nonce{P}{Q}{X}$
\end_inset

, 
\backslash
nonce{P}{Q}{X}
\end_layout

\end_deeper
\begin_layout Enumerate
Jurisdiction rule
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\jurisdiction{P}{Q}{X}$
\end_inset

, 
\backslash
jurisdiction{P}{Q}{X}
\end_layout

\end_deeper
\begin_layout Enumerate
Other postulates
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\freshcouple{P}{X}{Y}$
\end_inset

, 
\backslash
freshcouple{X}{Y}
\end_layout

\end_deeper
\end_body
\end_document
